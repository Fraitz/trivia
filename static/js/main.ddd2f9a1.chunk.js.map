{"version":3,"sources":["services/triviaAPI.js","components/InputLogin.js","components/Button.js","pages/Login.js","components/Header.js","pages/Feedbacks.js","redux/actions/index.js","components/Question.js","services/fetchGame.js","pages/GamePage.js","pages/Ranking.js","components/HeaderConfig.js","services/fetchCategories.js","components/Select.js","pages/Configurations.js","App.js","serviceWorker.js","redux/reducers/gameSettings.js","redux/reducers/score.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["fetchTriviaAPI","a","async","fetch","fetchAPI","json","response","token","localStorage","setItem","InputLogin","this","props","labelValue","maxlength","dataTestId","onChange","name","value","placeHolder","htmlFor","maxLength","type","data-testid","id","Component","Button","onClick","disabled","classe","className","Login","state","btnDisabledStatus","email","redirectToGamePage","redirectToSettings","redirectToRankingPage","rankingBtn","handleChange","bind","handleClickPlay","handleClickRanking","handleClickSettings","verifyInputs","playBtnOn","savePlayerData","rankingOn","renderForm","player","JSON","parse","getItem","setState","hash","md5","toString","assertions","score","gravatarEmail","gravatarUrl","stringify","on","game","target","isValidEmail","test","to","Header","src","mountHeader","thisScore","alt","connect","Feedbacks","handleClick","getAssertionsAndScore","textContent","history","push","getScore","Question","options","correctAnswer","shuffle","clickedOption","calculateScore","getButtonClass","hide","startTimer","prevProps","question","correct_answer","option","disabledOptions","correct","actualClass","allAlternatives","incorrect_answers","sort","Math","random","show","pauseTimer","isClicked","storeScore","difficulty","weight","timerValue","category","map","key","indexOf","dispatch","fetchQuestions","configs","EXPIRED_CODE","END_POINT","fetchQuestion","results","response_code","forEach","window","atob","length","mountQuestions","mountedQuestions","GamePage","questions","questionsIndex","hidden","loading","finalizeDisabled","componentDidMount","getQuestions","hideNextQuestionButton","nextQuestion","showNextQuestionButton","resetTimer","timer","stopTimer","saveRanking","generateButtons","prevState","clearInterval","interval","ranking","finalScore","picture","record","thisUser","find","playerScore","setInterval","gameSettings","Ranking","showRanking","divWon","divPersonal","sortedRanking","b","index","HeaderConfig","fetchCategories","searchCategories","trivia_categories","Select","labelName","Configurations","categories","saveDisabled","getCategoriesOptions","getDifficultiesOptions","handleClickCancel","handleClickSave","mountCategories","mountSettings","renderConfigs","renderButtons","storedSettings","Fácil","Médio","Difícil","difficultyOption","Object","values","keys","obj","setConfigs","categoriesOptions","difficultiesOptions","types","getTypeOptions","thisConfig","changeSettings","App","exact","path","component","React","Boolean","location","hostname","match","initialState","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddd2f9a1.chunk.js","sourcesContent":["const fetchTriviaAPI = async () => {\n  const fetchAPI = await fetch('https://opentdb.com/api_token.php?command=request');\n  const response = await fetchAPI.json();\n  const { token } = response;\n  localStorage.setItem('token', token);\n};\n\nexport default fetchTriviaAPI;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputLogin extends Component {\n  render() {\n    const { labelValue, maxlength,\n      dataTestId, onChange, name, value, placeHolder } = this.props;\n\n    return (\n      <label htmlFor={ dataTestId }>\n        { labelValue }\n        <input\n          maxLength={ maxlength }\n          placeHolder={ placeHolder }\n          type=\"text\"\n          data-testid={ dataTestId }\n          id={ dataTestId }\n          onChange={ onChange }\n          name={ name }\n          value={ value }\n        />\n      </label>\n    );\n  }\n}\n\nInputLogin.propTypes = {\n  labelValue: PropTypes.string.isRequired,\n  dataTestId: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  placeHolder: PropTypes.string.isRequired,\n  maxlength: PropTypes.number.isRequired,\n};\n\nexport default InputLogin;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../pages/pages-css/GamePage.css';\n\nclass Button extends Component {\n  render() {\n    const { dataTestId, name, onClick, disabled, classe, id } = this.props;\n\n    return (\n      <button\n        className={ classe }\n        data-testid={ dataTestId }\n        disabled={ disabled }\n        id={ id }\n        onClick={ onClick }\n        type=\"button\"\n      >\n        { name }\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  name: PropTypes.string,\n  onClick: PropTypes.func,\n  text: PropTypes.string,\n  type: PropTypes.string,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n}.isRequired;\n\nexport default Button;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport fetchTriviaAPI from '../services/triviaAPI';\nimport InputLogin from '../components/InputLogin';\nimport Button from '../components/Button';\nimport './pages-css/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      btnDisabledStatus: true,\n      email: '',\n      name: '',\n      redirectToGamePage: false,\n      redirectToSettings: false,\n      redirectToRankingPage: false,\n      rankingBtn: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickPlay = this.handleClickPlay.bind(this);\n    this.handleClickRanking = this.handleClickRanking.bind(this);\n    this.handleClickSettings = this.handleClickSettings.bind(this);\n    this.verifyInputs = this.verifyInputs.bind(this);\n    this.playBtnOn = this.playBtnOn.bind(this);\n    this.savePlayerData = this.savePlayerData.bind(this);\n    this.rankingOn = this.rankingOn.bind(this);\n    this.renderForm = this.renderForm.bind(this);\n  }\n\n  componentDidMount() {\n    const player = JSON.parse(localStorage.getItem('state'));\n    if (player !== null) {\n      this.playBtnOn(false, player);\n    }\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    if (ranking !== null) {\n      this.rankingOn();\n    }\n  }\n\n  rankingOn() {\n    this.setState({\n      rankingBtn: false,\n    });\n  }\n\n  savePlayerData() {\n    const { email, name } = this.state;\n    const hash = md5(email).toString();\n    const SRC = `https://www.gravatar.com/avatar/${hash}`;\n    const state = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n        gravatarUrl: SRC,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  playBtnOn(on, game) {\n    const { player } = game;\n    this.setState({\n      name: player.name,\n      email: player.gravatarEmail,\n      btnDisabledStatus: on,\n    });\n  }\n\n  handleClickSettings() {\n    this.setState({\n      redirectToSettings: true,\n    });\n  }\n\n  async handleClickPlay() {\n    this.savePlayerData();\n    fetchTriviaAPI();\n\n    this.setState({\n      redirectToGamePage: true,\n    });\n  }\n\n  async handleClickRanking() {\n    this.savePlayerData();\n\n    this.setState({\n      redirectToRankingPage: true,\n    });\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    }, () => this.verifyInputs());\n  }\n\n  verifyInputs() {\n    const { name, email } = this.state;\n    const emailVerification = /\\S+@\\S+\\.\\S+/;\n    const isValidEmail = emailVerification.test(email);\n\n    if (name !== '' && email !== '' && isValidEmail) {\n      this.setState({\n        btnDisabledStatus: false,\n      });\n    } else {\n      this.setState({\n        btnDisabledStatus: true,\n      });\n    }\n  }\n\n  renderForm() {\n    const { btnDisabledStatus, email, name,\n      rankingBtn } = this.state;\n    return (\n      <form className=\"formLogin\">\n        <InputLogin\n          placeHolder=\" Name/Username\"\n          dataTestId=\"input-player-name\"\n          onChange={ this.handleChange }\n          maxlength=\"29\"\n          name=\"name\"\n          value={ name }\n        />\n        <InputLogin\n          placeHolder=\" E-mail\"\n          dataTestId=\"input-gravatar-email\"\n          onChange={ this.handleChange }\n          name=\"email\"\n          value={ email }\n        />\n        <div className=\"buttons\">\n          <Button\n            dataTestId=\"btn-play\"\n            name=\"Jogar\"\n            classe=\"btn-play\"\n            disabled={ btnDisabledStatus }\n            onClick={ this.handleClickPlay }\n          />\n          <Button\n            dataTestId=\"btn-settings\"\n            name=\"Configurações\"\n            classe=\"btn-config\"\n            onClick={ this.handleClickSettings }\n          />\n          <Button\n            name=\"Ranking\"\n            classe=\"btn-ranking\"\n            disabled={ rankingBtn }\n            onClick={ this.handleClickRanking }\n          />\n        </div>\n      </form>\n    );\n  }\n\n  render() {\n    const { redirectToGamePage, redirectToSettings,\n      redirectToRankingPage } = this.state;\n\n    return (\n      <div className=\"loginBackground\">\n        <div className=\"loginDiv\">\n          <h1 className=\"loginTitle\">Trivia Game</h1>\n          { this.renderForm() }\n          { redirectToGamePage && <Redirect to=\"/gamepage\" /> }\n          { redirectToSettings && <Redirect to=\"/settings\" /> }\n          { redirectToRankingPage && <Redirect to=\"/ranking\" />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './components-css/Header.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      src: '',\n    };\n\n    this.mountHeader = this.mountHeader.bind(this);\n  }\n\n  componentDidMount() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    if (player !== null) {\n      this.mountHeader(player);\n    }\n  }\n\n  mountHeader(player) {\n    this.setState({\n      name: player.name,\n      src: player.gravatarUrl,\n    });\n  }\n\n  render() {\n    const { name, src } = this.state;\n    const { thisScore } = this.props;\n\n    return (\n      <div>\n        <header className=\"header\">\n          <section className=\"header-profile\">\n            <img\n              data-testid=\"header-profile-picture\"\n              src={ src }\n              alt=\"imagem do avatar\"\n              className=\"header-profile-picture\"\n            />\n            <h2\n              data-testid=\"header-player-name\"\n              className=\"header-player-name\"\n            >\n              { name }\n            </h2>\n          </section>\n          <div className=\"header-points\">\n            <h3>Pontos:</h3>\n            <h3 data-testid=\"header-score\" className=\"header-score\">\n              { thisScore }\n            </h3>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  thisScore: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  thisScore: state.score.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport './pages-css/Feedbacks.css';\n\nclass Feedbacks extends Component {\n  constructor() {\n    super();\n    this.state = {\n      assertions: 0,\n      score: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getAssertionsAndScore = this.getAssertionsAndScore.bind(this);\n  }\n\n  componentDidMount() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const { assertions, score } = player;\n    this.getAssertionsAndScore(assertions, score);\n  }\n\n  getAssertionsAndScore(assertions, score) {\n    this.setState({\n      assertions,\n      score,\n    });\n  }\n\n  handleClick({ target: { textContent } }) {\n    const { history } = this.props;\n\n    if (textContent === 'Ver Ranking') {\n      history.push('/ranking');\n    }\n\n    if (textContent === 'Jogar Novamente') {\n      history.push('/');\n    }\n  }\n\n  render() {\n    const { assertions, score } = this.state; // Vem do estado do componente, e antes, do localStorage\n    const WELL_PLAYED = 3;\n    return (\n      <div className=\"divFeedback\">\n        <Header />\n        <section className=\"sectionMain\">\n          <div className=\"feedbackTitle\">\n            <h2 data-testid=\"feedback-text\">\n              {assertions >= WELL_PLAYED ? 'Mandou bem!' : 'Podia ser melhor...'}\n            </h2>\n          </div>\n          <div className=\"acertos\">\n            <h3>\n              De 5 questões você acertou:\n            </h3>\n            <span data-testid=\"feedback-total-question\">{assertions}</span>\n          </div>\n          <div className=\"pontuacao\">\n            <h3>\n              Pontuação:\n            </h3>\n            <span data-testid=\"feedback-total-score\">\n              {score}\n            </span>\n          </div>\n          <div className=\"button-container\">\n            <Button\n              classe=\"again\"\n              dataTestId=\"btn-play-again\"\n              name=\"Jogar Novamente\"\n              onClick={ this.handleClick }\n            />\n            <Button\n              classe=\"ranking\"\n              dataTestId=\"btn-ranking\"\n              name=\"Ver Ranking\"\n              onClick={ this.handleClick }\n            />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nFeedbacks.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n}.isRequired;\n\nexport default Feedbacks;\n","export const SCORE = 'ADD_USER';\nexport const GAME_SETTINGS = 'GAME_SETTINGS';\n\n// Criando action creator changeSettings\n// Com o type igual a const e com parâmetro thisConfig\nexport const changeSettings = (thisConfig) => ({\n  type: GAME_SETTINGS,\n  thisConfig,\n});\n\nexport const getScore = (score) => ({\n  type: SCORE,\n  score,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport { getScore } from '../redux/actions/index';\nimport './components-css/Question.css';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: [],\n      correctAnswer: '',\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.clickedOption = this.clickedOption.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.getButtonClass = this.getButtonClass.bind(this);\n  }\n\n  componentDidMount() {\n    const { hide, startTimer } = this.props;\n    this.shuffle();\n    startTimer();\n    hide();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { question } = this.props;\n    if (prevProps.question.correct_answer !== question.correct_answer) {\n      this.shuffle();\n    }\n  }\n\n  getButtonClass(option) {\n    const { disabledOptions } = this.props;\n    const { correctAnswer } = this.state;\n    const correct = option === correctAnswer;\n    let actualClass = 'nada';\n\n    if (correct && disabledOptions) {\n      actualClass = 'correct-answer';\n    } else if (!correct && disabledOptions) {\n      actualClass = 'incorrect-answer';\n    }\n\n    return actualClass;\n  }\n\n  shuffle() {\n    const { question } = this.props;\n    const correctAnswer = question.correct_answer;\n    const allAlternatives = [question.correct_answer, ...question.incorrect_answers];\n    const magicNumber = 0.5;\n    allAlternatives.sort(() => Math.random() - magicNumber);\n    // this.timer();\n    this.setState({\n      options: allAlternatives,\n      correctAnswer,\n    });\n  }\n\n  clickedOption({ target }) {\n    const { show, pauseTimer, isClicked, storeScore } = this.props;\n    pauseTimer();\n    if (target.id === 'correct') {\n      const { player } = JSON.parse(localStorage.getItem('state'));\n      player.assertions += 1;\n      player.score += this.calculateScore(); // calcula e salva no localStorage chave player.score\n      localStorage.setItem('state', JSON.stringify({ player: { ...player } }));\n      storeScore(player.score);\n    }\n    isClicked();\n    target.id = `selected-${target.id}`;\n    show();\n  }\n\n  calculateScore() {\n    const { question: { difficulty }, timerValue } = this.props;\n    const ONE = 1;\n    const TWO = 2;\n    const THREE = 3;\n    let weight = 0;\n    const defaultPoints = 10;\n    if (difficulty === 'hard') { weight = THREE; }\n    if (difficulty === 'medium') { weight = TWO; }\n    if (difficulty === 'easy') { weight = ONE; }\n\n    return defaultPoints + (timerValue * weight);\n  }\n\n  render() {\n    const { options, correctAnswer } = this.state;\n    const { question, timerValue, disabledOptions } = this.props;\n\n    return (\n      <div className=\"question-container\">\n        <div className=\"questionTitles\">\n          <h3\n            className=\"question-category\"\n            data-testid=\"question-category\"\n          >\n            { question.category }\n          </h3>\n          <h2\n            className=\"question-text\"\n            data-testid=\"question-text\"\n          >\n            { question.question }\n          </h2>\n        </div>\n        <h3 className=\"timer\">{ timerValue }</h3>\n        <div className=\"options-container\">\n          {options.map((option) => {\n            const correct = option === correctAnswer;\n            return (\n              <Button\n                classe={ `btn-options ${this.getButtonClass(option)}` }\n                key={ option }\n                dataTestId={\n                  correct\n                    ? 'correct-answer'\n                    : `wrong-answer-${question.incorrect_answers.indexOf(option)}`\n                }\n                id={ correct ? 'correct' : 'incorrect' }\n                name={ option }\n                onClick={ this.clickedOption }\n                disabled={ disabledOptions }\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  disabledOptions: PropTypes.bool,\n  hide: PropTypes.func,\n  isClicked: PropTypes.func,\n  pauseTimer: PropTypes.func,\n  question: PropTypes.object,\n  show: PropTypes.func,\n  storeScore: PropTypes.func,\n  timerValue: PropTypes.number,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeScore: (score) => dispatch(getScore(score)),\n});\n\nexport default connect(null, mapDispatchToProps)(Question);\n","import fetchTriviaAPI from './triviaAPI';\n\nconst fetchQuestions = async (token, configs) => {\n  const EXPIRED_CODE = 3; // Se for um token inválido é retornado código 3 na resposta\n  const { category, difficulty, type } = configs;\n  const END_POINT = `https://opentdb.com/api.php?amount=5&token=${token}&category=${category}&difficulty=${difficulty}&type=${type}&encode=base64`;\n  const fetchQuestion = await fetch(END_POINT);\n  const response = await fetchQuestion.json();\n  const { results } = response;\n\n  if (response.response_code === EXPIRED_CODE) return 'token failure';\n\n  results.forEach((question) => {\n    question.category = window.atob(question.category);\n    question.type = window.atob(question.type);\n    question.difficulty = window.atob(question.difficulty);\n    question.question = window.atob(question.question);\n    question.correct_answer = window.atob(question.correct_answer);\n    question.incorrect_answers[0] = window.atob(question.incorrect_answers[0]);\n    if (question.incorrect_answers.length > 1) {\n      question.incorrect_answers[1] = window.atob(question.incorrect_answers[1]);\n      question.incorrect_answers[2] = window.atob(question.incorrect_answers[2]);\n    }\n  });\n\n  return results; // retorna um array com as questões, cada elemento do array é um objeto\n};\n\nconst mountQuestions = async (configs) => {\n  let token = localStorage.getItem('token');\n\n  if (!token) {\n    await fetchTriviaAPI();\n    token = localStorage.getItem('token');\n  }\n\n  let mountedQuestions = await fetchQuestions(token, configs);\n\n  if (mountedQuestions === 'token failure') {\n    await fetchTriviaAPI();\n    token = localStorage.getItem('token');\n    mountedQuestions = await fetchQuestions(token, configs);\n  }\n\n  return mountedQuestions;\n};\n\nexport default mountQuestions;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\nimport Button from '../components/Button';\nimport mountQuestions from '../services/fetchGame';\nimport { getScore } from '../redux/actions/index';\nimport './pages-css/GamePage.css';\n\nclass GamePage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: [],\n      questionsIndex: 0,\n      hidden: true,\n      loading: true,\n      timerValue: 30,\n      finalizeDisabled: true,\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.getQuestions = this.getQuestions.bind(this);\n    this.hideNextQuestionButton = this.hideNextQuestionButton.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.showNextQuestionButton = this.showNextQuestionButton.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.pauseTimer = this.pauseTimer.bind(this);\n    this.isClicked = this.isClicked.bind(this);\n    this.saveRanking = this.saveRanking.bind(this);\n    this.generateButtons = this.generateButtons.bind(this);\n  }\n\n  async componentDidMount() {\n    const { configs } = this.props;\n    const questions = await mountQuestions(configs);\n    this.getQuestions(questions);\n    const { storeScore } = this.props;\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    player.assertions = 0;\n    player.score = 0; // zera e salva no localStorage chave player.score\n    storeScore(player.score);\n    localStorage.setItem('state', JSON.stringify({ player: { ...player } }));\n  }\n\n  getQuestions(questions) {\n    this.setState({\n      questions,\n      loading: false,\n    });\n  }\n\n  generateButtons() {\n    const { hidden, finalizeDisabled } = this.state;\n    return (\n      <div className=\"game-btn-next-container\">\n        {\n          !hidden && <Button\n            classe=\"btn-next\"\n            dataTestId=\"btn-next\"\n            disabled={ hidden }\n            name=\"Próxima\"\n            onClick={ this.nextQuestion }\n          />\n        }\n        {\n          !finalizeDisabled && <Button\n            classe=\"btn-finale\"\n            dataTestId=\"btn-next\"\n            disabled={ finalizeDisabled }\n            name=\"Finalizar\"\n            onClick={ this.nextQuestion }\n          />\n        }\n      </div>\n    );\n  }\n\n  hideNextQuestionButton() {\n    this.setState({\n      hidden: true,\n    });\n  }\n\n  isClicked() {\n    this.setState({\n      disabledOptions: true,\n    });\n  }\n\n  nextQuestion() {\n    const FOUR = 4;\n    const { questionsIndex } = this.state;\n    if (questionsIndex === FOUR) {\n      this.saveRanking();\n    }\n    this.resetTimer();\n    this.timer();\n    this.setState((prevState) => ({\n      questionsIndex: prevState.questionsIndex + 1,\n      disabledOptions: false,\n      hidden: true,\n    }));\n  }\n\n  pauseTimer() {\n    clearInterval(this.interval);\n  }\n\n  resetTimer() {\n    this.setState({\n      timerValue: 30,\n    });\n  }\n\n  saveRanking() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const { gravatarUrl } = player;\n    const finalScore = {\n      picture: gravatarUrl,\n      name: player.name,\n      score: player.score,\n      record: '',\n    };\n    if (!ranking) {\n      localStorage.setItem('ranking', JSON.stringify([finalScore]));\n    }\n    if (ranking) {\n      const thisUser = ranking.find((playerScore) => playerScore.picture === gravatarUrl);\n\n      // Valeu Sir. Rafael Janovicci\n      if (thisUser && thisUser.score <= player.score) {\n        thisUser.score = player.score;\n        thisUser.record = 'recorde';\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      } else {\n        ranking.push(finalScore);\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      }\n    }\n  }\n\n  stopTimer() {\n    const { timerValue } = this.state;\n    const ZERO = 0;\n    if (timerValue === ZERO) {\n      clearInterval(this.interval);\n      this.setState({\n        disabledOptions: true,\n      });\n      this.showNextQuestionButton();\n    }\n  }\n\n  showNextQuestionButton() {\n    const { questionsIndex } = this.state;\n    const FOUR = 4;\n    if (questionsIndex === FOUR) {\n      this.setState({\n        finalizeDisabled: false,\n      });\n    } else {\n      this.setState({\n        hidden: false,\n      });\n    }\n  }\n\n  timer() {\n    const ONE_SECOND = 1000;\n\n    this.interval = setInterval(() => {\n      this.setState((prevState) => ({\n        timerValue: prevState.timerValue - 1,\n      }));\n      this.stopTimer();\n    }, ONE_SECOND);\n  }\n\n  render() {\n    const {\n      questions,\n      questionsIndex,\n      loading,\n      timerValue,\n      disabledOptions } = this.state;\n    const FIVE = 5;\n    if (questionsIndex === FIVE) {\n      return <Redirect to=\"/feedback\" />;\n    }\n\n    return (\n      <div className=\"game-page-container\">\n        <Header />\n        <div className=\"game\">\n          <div className=\"game-container\">\n            <div className=\"game-question-container\">\n              {\n                loading ? <p><i className=\"fas fa-spinner loading\" /></p> : <Question\n                  hide={ this.hideNextQuestionButton }\n                  question={ questions[questionsIndex] }\n                  show={ this.showNextQuestionButton }\n                  timerValue={ timerValue }\n                  pauseTimer={ this.pauseTimer }\n                  startTimer={ this.timer }\n                  resetTimer={ this.resetTimer }\n                  isClicked={ this.isClicked }\n                  disabledOptions={ disabledOptions }\n                />\n              }\n            </div>\n            { this.generateButtons() }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nGamePage.propTypes = {\n  configs: PropTypes.shape({\n    difficulty: PropTypes.string,\n    cattegory: PropTypes.string,\n    type: PropTypes.string }),\n  storeScore: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = ({ gameSettings: { difficulty, category, type } }) => ({\n  configs: {\n    difficulty,\n    category,\n    type,\n  },\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeScore: (score) => dispatch(getScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './pages-css/Ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n\n    this.showRanking = this.showRanking.bind(this);\n    this.divWon = this.divWon.bind(this);\n    this.divPersonal = this.divPersonal.bind(this);\n  }\n\n  componentDidMount() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    // Ordena o ranking pela pontuação;\n    const sortedRanking = ranking.sort((a, b) => (\n      b.score - a.score\n    ));\n    this.showRanking(sortedRanking);\n  }\n\n  showRanking(sortedRanking) {\n    this.setState({\n      ranking: sortedRanking,\n    });\n  }\n\n  divWon() {\n    return (\n      <div className=\"won\">\n        <span className=\"material-icons md-24\">\n          emoji_events\n        </span>\n      </div>\n    );\n  }\n\n  divPersonal() {\n    return (\n      <div className=\"best\">\n        <span className=\"material-icons md-24\">star</span>\n      </div>\n    );\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"ranking-div\">\n        <div className=\"ranking-title\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <Link to=\"/\" data-testid=\"btn-go-home\">\n            <button className=\"btn-go-home\" type=\"button\">Tela inicial</button>\n          </Link>\n        </div>\n        <div className=\"rankingList\">\n          <ol className=\"ol-ranking\">\n            { ranking.map((player, index) => (\n              <li className=\"li-ranking\" key={ player.gravatarUrl }>\n                <div className=\"mainInfos\">\n                  <h1>{ `${index + 1}` }</h1>\n                  <img className=\"img-gravatar\" src={ player.picture } alt=\"Gravatar\" />\n                  <h2 data-testid={ `player-name-${index}` }>\n                    { player.name }\n                  </h2>\n                </div>\n                <div className=\"score\">\n                  <h3>score</h3>\n                  <div className=\"points\">\n                    <h3 data-testid={ `player-score-${index}` }>\n                      { player.score }\n                    </h3>\n                  </div>\n                  {\n                    (player.record === 'recorde') && this.divPersonal()\n                  }\n                  {\n                    (index + 1 === 1) && this.divWon()\n                  }\n                </div>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport './components-css/HeaderConfig.css';\n\nclass HeaderConfig extends Component {\n  render() {\n    return (\n      <div className=\"header-config\">\n        <h1>Configurações</h1>\n      </div>\n    );\n  }\n}\n\nexport default HeaderConfig;\n","const fetchCategories = async () => {\n  const searchCategories = await fetch('https://opentdb.com/api_category.php');\n  const response = await searchCategories.json();\n\n  return response.trivia_categories; // retorna o array com as categorias\n};\n\nexport default fetchCategories;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends Component {\n  render() {\n    const { labelName, id, value, name, options, onChange, classe } = this.props;\n\n    return (\n      <label htmlFor={ id }>\n        { labelName }\n        <select\n          id={ id }\n          className={ classe }\n          value={ value }\n          name={ name }\n          onChange={ onChange }\n        >\n          <option value=\"\">Qualquer</option>\n          {options}\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  labelName: PropTypes.string,\n  id: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.element,\n  onChange: PropTypes.func,\n  classe: PropTypes.string,\n}.isRequired;\n\nexport default Select;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport HeaderConfig from '../components/HeaderConfig';\nimport { changeSettings } from '../redux/actions';\nimport fetchCategories from '../services/fetchCategories';\nimport Button from '../components/Button';\nimport Select from '../components/Select';\nimport './pages-css/Configurations.css';\n\nclass Configurations extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      categories: [],\n      category: '',\n      difficulty: '',\n      saveDisabled: true,\n      type: '',\n    };\n\n    this.getCategoriesOptions = this.getCategoriesOptions.bind(this);\n    this.getDifficultiesOptions = this.getDifficultiesOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickCancel = this.handleClickCancel.bind(this);\n    this.handleClickSave = this.handleClickSave.bind(this);\n    this.mountCategories = this.mountCategories.bind(this);\n    this.mountSettings = this.mountSettings.bind(this);\n    this.renderConfigs = this.renderConfigs.bind(this);\n    this.renderButtons = this.renderButtons.bind(this);\n  }\n\n  async componentDidMount() {\n    const categories = await fetchCategories();\n    const { storedSettings } = this.props;\n    this.mountCategories(categories);\n    this.mountSettings(storedSettings);\n  }\n\n  getCategoriesOptions() {\n    const { categories } = this.state;\n\n    return categories\n      .map(({ id, name }) => (<option key={ id } value={ id }>{ name }</option>));\n  }\n\n  getDifficultiesOptions() {\n    return [{ Fácil: 'easy' }, { Médio: 'medium' }, { Difícil: 'hard' }]\n      .map((difficultyOption, index) => (\n        <option\n          key={ index }\n          value={ Object.values(difficultyOption) }\n        >\n          { Object.keys(difficultyOption) }\n        </option>));\n  }\n\n  getTypeOptions() {\n    const types = [{ type: 'multiple', name: 'Múltipla Escolha' },\n      { type: 'boolean', name: 'Verdadeiro/Falso' }];\n    return types.map((obj, index) => (\n      <option key={ index } value={ obj.type }>{ obj.name }</option>\n    ));\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({\n      [name]: value,\n      saveDisabled: false,\n    });\n  }\n\n  handleClickCancel() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  handleClickSave() {\n    const { category, difficulty, type } = this.state;\n    const { setConfigs, history } = this.props;\n    const thisConfig = { category, difficulty, type };\n    setConfigs(thisConfig);\n    history.push('/');\n  }\n\n  mountCategories(categories) {\n    this.setState({\n      categories,\n    });\n  }\n\n  mountSettings(storedSettings) {\n    const { difficulty, type, category } = storedSettings;\n    this.setState({\n      difficulty,\n      type,\n      category,\n    });\n  }\n\n  renderConfigs() {\n    const { category, difficulty, type } = this.state;\n    const categoriesOptions = this.getCategoriesOptions();\n    const difficultiesOptions = this.getDifficultiesOptions();\n    const types = this.getTypeOptions();\n    return (\n      <div className=\"selectInputs\">\n        <Select\n          classe=\"select-categories\"\n          id=\"category\"\n          labelName=\"Categorias\"\n          name=\"category\"\n          onChange={ this.handleChange }\n          options={ categoriesOptions }\n          value={ category }\n        />\n        <Select\n          classe=\"select-difficulties\"\n          id=\"difficulty\"\n          labelName=\"Dificuldade\"\n          name=\"difficulty\"\n          onChange={ this.handleChange }\n          options={ difficultiesOptions }\n          value={ difficulty }\n        />\n        <Select\n          classe=\"select-types\"\n          id=\"type\"\n          labelName=\"Tipo\"\n          name=\"type\"\n          onChange={ this.handleChange }\n          options={ types }\n          value={ type }\n        />\n      </div>\n    );\n  }\n\n  renderButtons() {\n    const { saveDisabled } = this.state;\n    return (\n      <div className=\"saveButtons\">\n        <Button\n          classe=\"btn-save-config\"\n          disabled={ saveDisabled }\n          name=\"Salvar e Sair\"\n          onClick={ this.handleClickSave }\n        />\n        <Button\n          classe=\"btn-not-save-config\"\n          name=\"Sair sem Salvar\"\n          onClick={ this.handleClickCancel }\n        />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <HeaderConfig />\n        <div className=\"mainSettings\">\n          <h1 data-testid=\"settings-title\" className=\"settings-title\">\n            Personalize o teu game!\n          </h1>\n          { this.renderConfigs() }\n          { this.renderButtons() }\n        </div>\n      </div>\n    );\n  }\n}\n\nConfigurations.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  setConfigs: PropTypes.func,\n  storedSettings: PropTypes.shape({\n    cattegory: PropTypes.string,\n    difficulty: PropTypes.string,\n    type: PropTypes.string }),\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  setConfigs: (thisConfig) => dispatch(changeSettings(thisConfig)),\n});\n\nconst mapStateToProps = (state) => ({\n  storedSettings: state.gameSettings,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Configurations);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';// import logo from './trivia.png';\nimport './App.css';\nimport Login from './pages/Login';\nimport Feedbacks from './pages/Feedbacks';\nimport GamePage from './pages/GamePage';\nimport Ranking from './pages/Ranking';\nimport Configurations from './pages/Configurations';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/feedback\" component={ Feedbacks } />\n        <Route exact path=\"/gamepage\" component={ GamePage } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/settings\" component={ Configurations } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GAME_SETTINGS } from '../actions';\n\nconst initialState = {\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nfunction gameSettings(state = initialState, action) {\n  switch (action.type) {\n  case GAME_SETTINGS:\n    return {\n      ...state,\n      category: action.thisConfig.category,\n      difficulty: action.thisConfig.difficulty,\n      type: action.thisConfig.type,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default gameSettings;\n","import { SCORE } from '../actions';\n\nconst initialState = {\n  score: 0,\n};\n\nfunction score(state = initialState, action) {\n  switch (action.type) {\n  case SCORE:\n    return { ...state, score: action.score };\n\n  default:\n    return state;\n  }\n}\n\nexport default score;\n","import { combineReducers } from 'redux';\nimport gameSettings from './gameSettings';\nimport score from './score';\n\nconst rootReducer = combineReducers({ gameSettings, score });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}